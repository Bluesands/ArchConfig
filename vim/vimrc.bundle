" ==============================================================================

set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


Plugin 'VundleVim/Vundle.vim'
" 设置目录树
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'jistr/vim-nerdtree-tabs'
" 自动补全插件
Plugin 'Shougo/neocomplete.vim'
Plugin 'davidhalter/jedi-vim'
" 符号自动补全
Plugin 'jiangmiao/auto-pairs'
" 批量注释
Plugin 'scrooloose/nerdcommenter'
" vim markdown 实时预览
Plugin 'plasticboy/vim-markdown'
Plugin 'godlygeek/tabular'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'tpope/vim-fugitive'
" 缩进提示线
Plugin 'Yggdroot/indentLine'
" python代码格式化
Plugin 'tell-k/vim-autopep8'
" python 语法检查
Plugin 'scrooloose/syntastic'
" 状态栏增强工具
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" 文件搜索
Plugin 'kien/ctrlp.vim'
" vim 主题
" Plugin 'altercation/vim-colors-solarized'
" python 语法高亮
Plugin 'hdima/python-syntax'
" f F t T 查找
Plugin 'unblevable/quick-scope'
" 高亮成对符号
Plugin 'luochen1990/rainbow'
" 代码片段复用
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
" 快速跳转
Plugin 'easymotion/vim-easymotion'
" jinjia2 语法
Plugin 'Glench/Vim-Jinja2-Syntax'
" 配对符号快速修改
Plugin 'tpope/vim-surround'
" 大纲,变量函数列表
Plugin 'majutsushi/tagbar'
" 光标快速移动
Plugin 'terryma/vim-multiple-cursors'
" 代码搜索ag
Plugin 'rking/ag.vim'

call vundle#end()            " required
filetype plugin indent on    " required

" ==============================================================================
" ==============================================================================
" 自动补全

" Disable AutoComplPop.
let g:acp_enableAtStartup = 1
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


let g:neocomplete#enable_auto_select = 0
let g:jedi#popup_select_first=0
set completeopt=longest,menuone
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\)\w*'


" ==============================================================================

" ultisnips {{{
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsListSnippet       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " 进入对应filetype的snippets进行编辑
    map <leader>us :UltiSnipsEdit<CR>

" ==============================================================================

" 自动开启nerdtree
autocmd vimenter * NERDTree
" 设定 NERDTree 视窗大小
let g:NERDTreeWinSize = 20
" 设置 ; + n 打开 NERDTree
map <Leader>n <plug>NERDTreeTabsToggle<CR>
let NERDTreeChDirMode=1
" 显示书签
let NERDTreeShowBookmarks=1
" 设置忽略文件类型
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
set cursorline "设置目前行下划线提示

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"===============================================================================

" 设置nerdtree-tab
let g:nerdtree_tabs_open_on_console_startup=1

"===============================================================================

" 设置git图标
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" ==============================================================================

" vim markdown 实时预览
" vim preview
let g:mkdp_path_to_chrome = "google-chrome"
" 设置 chrome 浏览器的路径（或是启动 chrome（或其他现代浏览器）的命令）

let g:mkdp_auto_start = 1
" 设置为 1 可以在打开 markdown 文件的时候自动打开浏览器预览，只在打开
" markdown 文件的时候打开一次

let g:mkdp_auto_open = 1
" 设置为 1 在编辑 markdown 的时候检查预览窗口是否已经打开，否则自动打开预
" 览窗口

let g:mkdp_auto_close = 1
" 在切换 buffer 的时候自动关闭预览窗口，设置为 0 则在切换 buffer 的时候不
" 自动关闭预览窗口

let g:mkdp_refresh_slow = 0
" 设置为 1 则只有在保存文件，或退出插入模式的时候更新预览，默认为 0，实时
" 更新预览

let g:mkdp_command_for_global = 0
" 设置为 1 则所有文件都可以使用 MarkdownPreview 进行预览，默认只有 markdown
" 文件可以使用改命令

set syntax=markdown
au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn}   set filetype=markdown

" ==============================================================================

" 设置indentLine
" 缩进指示线
let g:indentLine_char='┆'
let g:indentLine_enabled=1

" ==============================================================================

" autopep8 设置
let g:autopep8_disable_show_diff=1

" ==============================================================================
"
" syntastic
" 设置错误符号
let g:syntastic_error_symbol = '✗'
" 设置警告符号
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '⚠'
" 是否在打开文件时检查
let g:syntastic_check_on_open = 1
" 是否在保存文件后检查
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_highlighting = 1
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

let g:syntastic_python_python_exec = '/usr/local/python3/bin/python3.5'
let g:syntastic_python_pyflakes_exe = '/usr/local/python3/bin/pyflakes'
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
nnoremap <Leader>sn :lnext<cr>
nnoremap <Leader>sp :lprevious<cr>

" ==============================================================================

" auto-pairs设置
" 自动补全括号和引号
let g:AutoPairsFlyMode = 1 
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`', '<':'>'} 

" ==============================================================================

" nerd commenter 快速注释
let g:NERDSpaceDelims = 1
let g:NERDAltDelims_python = 1
map <F4> <leader>ci <CR>

" ==============================================================================

"Python 注释
function InsertPythonComment()
    exe 'normal'.1.'G'
    let line = getline('.')
    if line =~ '^#!.*$' || line =~ '^#.*coding:.*$'
        return
    endif
    normal O
    call setline('.', '#!/usr/bin/env python3')
    normal o
    call setline('.', '# -*- coding:utf-8 -*-')
    normal o
    call setline('.', '#')
    normal o
    call setline('.', '#   Author  :   '.g:python_author)
    normal o
    call setline('.', '#   E-mail  :   '.g:python_email)
    normal o
    call setline('.', '#   Date    :   '.strftime("%y/%m/%d %H:%M:%S"))
    normal o
    call setline('.', '#   Desc    :   ')
    normal o
    call setline('.', '#')
    normal o
    call cursor(7, 17)
endfunction
function InsertCommentWhenOpen()
    if a:lastline == 1 && !getline('.')
        call InsertPythonComment()
    end
endfunc
au FileType python :%call InsertCommentWhenOpen()
au FileType python map <F6> :call InsertPythonComment()<cr>

let g:python_author = 'qiang'
let g:python_email = 'BC5wenshuAD57@gmail.com'

" ==============================================================================
"
" <f5> 运行python程序
map <f5> :w<cr>:!python %<cr>
 
" <f5> 运行shell程序
map <f5> :call CompileRunSH()<cr>
func! CompileRunSH()
exec "w"
exec "!chmod a+x %"
exec "!./%"
endfunc

" ==============================================================================
"
" CtrlP 文件搜索配置
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=1
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

" ==============================================================================
"
" 设置easymotion
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)

" ==============================================================================

" tagbar配置
" 启动时自动focus
let g:tagbar_autofocus=1
" <F10>打开/关闭Tagbar
nnoremap <silent> <F10> :TagbarToggle<CR>

" ==============================================================================
"
" 'terryma/vim-multiple-cursors' 多光标移动配置
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" ==============================================================================
"
" unblevable/quick-scope 行内快速移动
let g:qs_first_occurrence_highlight_color = 155

" ==============================================================================
"
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let python_highlight_all = 1
"
" ==============================================================================
" vim-airline configure
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'powerlineish'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

"设置切换Buffer快捷键"
nnoremap m :bn<CR>
nnoremap mm :bp<CR>
"
" ==============================================================================
" ag 代码快速检索
let g:ackprg = 'ag --nogroup --nocolor --column'
